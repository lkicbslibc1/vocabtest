from flask import Flask, request, abort, jsonify, session
import json
import requests
import random
from project.Config import Channel_access_token

app = Flask(__name__)

vocab = {
    "consider": "deem to be",
    "minute": "infinitely or immeasurably small",
    "accord": "concurrence of opinion",
    "evident": "clearly revealed to the mind or the senses or judgment"
}

def quiz(vocab):
    if not vocab:
        print("No vocabulary words found. Add words to the dictionary.")
        return None, None
    word = random.choice(list(vocab.keys()))
    correct_meaning = vocab[word]
    options = [correct_meaning] + random.sample(list(vocab.values()), 3)
    random.shuffle(options)

    question = f"What is the meaning of '{word}'?\n"
    for i, option in enumerate(options, start=1):
        question += f"{chr(96 + i)}. {option}\n"

    correct_answer = chr(96 + options.index(correct_meaning) + 1)
    return question, correct_answer

@app.route('/')
def hello():
    return 'Hello, World!', 200

@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    if request.method == 'POST':
        LongMessage = request.json
        events = LongMessage.get('events', [])
        
        if not events:
            return jsonify({})

        Reply_token = events[0]['replyToken']
        message = events[0]['message']
        
        if message['type'] != 'text':
            return jsonify({})
        
        message_text = message['text']
        
        if message_text.lower() == 'start quiz':
            question, correct_answer = quiz(vocab)
            ReplyMessage(Reply_token, question, Channel_access_token)
        else:
            if 'correct_answer' in session:
                user_answer = message_text.lower()
                correct_answer = session['correct_answer'].lower()
                if user_answer == correct_answer:
                    ReplyMessage(Reply_token, "Congratulations! You got it right!", Channel_access_token)
                else:
                    ReplyMessage(Reply_token, f"Oops, that's not correct. The answer is '{session['correct_answer']}'.", Channel_access_token)
                session.pop('correct_answer', None)
        
        return jsonify({ "status": "success" })

        
    elif request.method == 'GET':
        return 'This is method GET!!', 200
    else:
        abort(400)

def ReplyMessage(Reply_token, Text_Message, Channel_access_token):
    LINE_API = "https://api.line.me/v2/bot/message"
    Authorization = "Bearer {}".format(Channel_access_token)
    headers = {
        "Content-Type": "application/json; charset=UTF-8",
        "Authorization": Authorization
    }
    data = {
        "replyToken": Reply_token,
        "messages": [{
            "type": "text",
            "text": Text_Message
        }]
    }

    data = json.dumps(data)
    r = requests.post(LINE_API, headers=headers, data=data)
    return 200
